// src/streaming/stream-health.service.ts

import { Injectable } from '@nestjs/common';
import { exec } from 'child_process';

@Injectable()
export class StreamHealthService {
  async testRtmpStream(rtmpUrl: string): Promise<boolean> {
    console.log(`[üîç] –ü—Ä–æ–≤–µ—Ä–∫–∞ RTMP –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ ffprobe: ${rtmpUrl}`);
    return new Promise((resolve) => {
      const cmd = `ffprobe -v error -show_streams -of json "${rtmpUrl}"`;

      exec(cmd, { timeout: 5000 }, (error, stdout) => {
        if (error) {
          console.warn(
            `[‚ö†Ô∏è] ffprobe –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${rtmpUrl}: ${error.message}`,
          );
          return resolve(false);
        }

        try {
          const parsed = JSON.parse(stdout);
          const hasVideo = parsed.streams?.some(
            (s: any) => s.codec_type === 'video',
          );

          if (hasVideo) {
            console.log(`[‚úÖ] RTMP ${rtmpUrl} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫`);
          } else {
            console.warn(`[‚ö†Ô∏è] RTMP ${rtmpUrl} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ`);
          }

          resolve(!!hasVideo);
        } catch (e) {
          console.warn(`[‚ö†Ô∏è] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ffprobe (RTMP): ${e}`);
          resolve(false);
        }
      });
    });
  }

  async isPublishing(rtmpUrl: string): Promise<boolean> {
    const streamKey = rtmpUrl.split('/').pop() ?? '';
    console.log(
      `[üîç] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ RTMP: ${rtmpUrl} (–∫–ª—é—á: ${streamKey})`,
    );

    try {
      const res = await fetch('http://rtsp-server:9997/v3/paths/list');
      const json = await res.json();

      const isActive =
        json.items &&
        Array.isArray(json.items) &&
        json.items.some((item: any) => item.name === streamKey);

      if (isActive) {
        console.log(`[‚úÖ] RTMP –ø–æ—Ç–æ–∫ "${streamKey}" –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è`);
      } else {
        console.warn(`[‚ö†Ô∏è] RTMP –ø–æ—Ç–æ–∫ "${streamKey}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ paths`);
      }

      return isActive;
    } catch (e) {
      console.error(`[‚ùå] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ RTSP-—Å–µ—Ä–≤–µ—Ä—É: ${e}`);
      return false;
    }
  }
}
